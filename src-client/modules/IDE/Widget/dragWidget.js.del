import { mapGetters, mapMutations, mapActions } from 'vuex'
import Vue from 'vue';
import Widget from './Widget'
import store from '../../../store/index'
import util from '../../../libs/util'

export default (
    config,
    opts = {
        clone: true,
        draggable: true
    }
) => {
    const _opts = {
        clone: typeof opts.clone == 'undefined' ? true : opts.clone,
        draggable: typeof opts.draggable == 'undefined' ? true : opts.draggable
    }
    return new Vue({
        name: `DragWidget`,
        store,
        components: {
            Widget: Widget
        },
        data() {
            return {
                config: config,
                draggable: _opts.draggable,
                clone: _opts.clone,
                width: 0,
                height: 0,
                childrens: []
            }
        },
        mounted(){
            const size = this.getSize();
            this.height = size.height;
            this.width = size.width;
        },
        computed: {
            ...mapGetters([
                `ide_canvans_ref`
            ])
        },
        methods: {
            ...mapMutations([
                `SET_IDE_WIDGET_DRAGING`,
                `DEL_IDE_WIDGET_DRAGING`
            ]),
            ...mapActions([
                `ACT_SET_IDE_WIDGET_DRAGIN_OFFSET`
            ]),
            _setTestCanvasHolder(left,top,width,height) {
                const $el = document.getElementById('ide-canvas-widget-placeholder');
                $el.style.top = `${top}px`;
                $el.style.left = `${left}px`;
                $el.style.width = `${width}px`;
                $el.style.height = `${height}px`
            },
            handleDrag(foo,event) {

                if (this.width == 0 || this.height == 0) {
                    const size = this.getSize();
                    this.width = size.width;
                    this.height = size.height;
                }
                const canvasOffset = util.offset(
                    {x:event.x,y:event.y},
                    this.ide_canvans_ref
                )
                this._setTestCanvasHolder(
                    event.x,
                    event.y,
                    this.width,
                    this.height
                )
                
                this.ACT_SET_IDE_WIDGET_DRAGIN_OFFSET({
                    x: event.x,
                    y: event.y,
                    width: this.width,
                    height: this.height,
                    canvasX: canvasOffset.x,
                    canvasY: canvasOffset.y
                })
            },
            setDraggable(draggable) {
                this.draggable = draggable;
            },
            mount(parent) {
                parent.appendChild(this.$el);
            },
            appendWidget(widget) {
                this.childrens.push(widget);
            },
            getSize() {
                const info = this.$el.getBoundingClientRect();
                return {
                    width: info.width,
                    height: info.height
                }
            },
            getPosSize(parent = null) {
                const topInfo = 
                        parent === null 
                            ? null
                            : parent.getBoundingClientRect();
                const info = this.$el.getBoundingClientRect();
                return {
                    top: topInfo ? info.top - topInfo.top : info.top,
                    left: topInfo ? info.left - topInfo.left : info.left,
                    width: info.width,
                    height: info.height
                }
            }
        },
        template: 
            `<drag ` + 
                `style="display:inline-block;" ` +
                `:draggable="draggable" ` +
                `@drag="handleDrag" ` +
                `@dragstart="SET_IDE_WIDGET_DRAGING(config)" ` +
                `@dragend="DEL_IDE_WIDGET_DRAGING" ` +
            `>` +
                `<Widget :config="config">` +
                `</Widget>` +
            `</drag>`
    }).$mount();
}